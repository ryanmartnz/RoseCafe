CREATE DATABASE pernwebapp;

CREATE TABLE users(
    user_id uuid PRIMARY KEY DEFAULT uuid_generate_v4(),
    user_first_name VARCHAR(255) NOT NULL,
    user_last_name VARCHAR(255) NOT NULL,
    user_email VARCHAR(255) NOT NULL,
    user_phone TEXT NOT NULL,
    user_password VARCHAR(255) NOT NULL
);

CREATE TABLE products(
    product_id VARCHAR(6) PRIMARY KEY,
    product_name VARCHAR(255) NOT NUll,
    product_base_price NUMERIC(4, 2) NOT NULL
);

CREATE TABLE drinks_size_prices(
    product_id VARCHAR(6) PRIMARY KEY REFERENCES products (product_id) ON DELETE CASCADE ON UPDATE CASCADE,
    small_price NUMERIC(4, 2) NOT NULL,
    medium_price NUMERIC(4, 2) NOT NULL,
    large_price NUMERIC(4, 2) NOT NULL
);

CREATE TABLE user_carts(
    cart_id INTEGER PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
    cart_user_id uuid NOT NULL REFERENCES users (user_id) ON DELETE CASCADE ON UPDATE CASCADE,
    product_id VARCHAR(6) NOT NULL REFERENCES products (product_id) ON DELETE CASCADE ON UPDATE CASCADE,
    product_name VARCHAR(255) NOT NUll,
    product_size VARCHAR(1) NOT NULL,
    quantity INTEGER NOT NULL,
    total_price NUMERIC(10, 2) NOT NULL
);

CREATE OR REPLACE FUNCTION check_quantity_non_positive()
RETURNS TRIGGER AS $$
BEGIN
    IF NEW.quantity <= 0 THEN
        DELETE FROM user_carts WHERE cart_id = NEW.cart_id;
    END IF;
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;


CREATE TRIGGER trg_check_quantity_non_positive
AFTER INSERT OR UPDATE ON user_carts
FOR EACH ROW
EXECUTE FUNCTION check_quantity_non_positive();


-- Order Statuses
-- IN_PROGRESS
-- READY
-- COMPLETED
-- CANCELLED
CREATE TABLE order_details(
    order_id INTEGER PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
    user_id uuid NOT NULL REFERENCES users (user_id) ON DELETE CASCADE ON UPDATE CASCADE,
    total NUMERIC(10, 2) NOT NULL,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    order_status VARCHAR(20) NOT NULL DEFAULT 'IN_PROGRESS',
    date_cancelled TIMESTAMP WITH TIME ZONE
);

CREATE TABLE order_items(
    id INTEGER PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 2147483647 CACHE 1 ),
    order_id INTEGER NOT NULL REFERENCES order_details (order_id) ON DELETE CASCADE ON UPDATE CASCADE,
    product_id VARCHAR(6) NOT NULL REFERENCES products (product_id),
    product_size VARCHAR(1) NOT NULL,
    quantity INTEGER NOT NULL
);